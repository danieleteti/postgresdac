unit PSQLBlobsTest;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, Db, Windows, PSQLAccess, ExtCtrls, Controls, Classes, PSQLDbTables,
  PSQLTypes, SysUtils, DbCommon, Variants, Graphics, StdVCL, TestExtensions,
  Forms, PSQLConnFrm;

type
  //Setup decorator
  TDbSetup = class(TTestSetup)
  protected
    procedure SetUp; override;
    procedure TearDown; override;
  end;

  // Test methods for class TPSQLQuery
  TestTPSQLBlobs = class(TTestCase)
  strict private
    FPSQLQuery: TPSQLQuery;
    FPSQLUpdate: TPSQLUpdateSQL;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestQueryInsertAndRead;
    procedure TestUpdateObjInsert;
  end;

var
  QryDB: TPSQLDatabase;

implementation

uses TestHelper;

procedure TestTPSQLBlobs.SetUp;
begin
  FPSQLQuery := TPSQLQuery.Create(nil);
  FPSQLQuery.Database := QryDB;
  QryDB.Execute('TRUNCATE blobs_test_case_table');
end;

procedure TestTPSQLBlobs.TearDown;
begin
  FPSQLQuery.Free;
  FPSQLQuery := nil;
end;

procedure TestTPSQLBlobs.TestQueryInsertAndRead;
begin
  FPSQLQuery.SQL.Text := 'SELECT * FROM blobs_test_case_table';
  FPSQLQuery.RequestLive := True;
  FPSQLQuery.Open;
  Check(FPSQLQuery.FieldByName('byteaf') is TBlobField, 'Wrong field class for byteaf');
  Check(FPSQLQuery.FieldByName('oidf') is TBlobField, 'Wrong field class for oidf');
  Check(FPSQLQuery.FieldByName('memof') is TBlobField, 'Wrong field class for memof');
  FPSQLQuery.Insert;
  (FPSQLQuery.FieldByName('byteaf') as TBlobField).LoadFromFile('TestData\test.bmp');
  (FPSQLQuery.FieldByName('oidf') as TBlobField).LoadFromFile('TestData\test.bmp');
  (FPSQLQuery.FieldByName('memof') as TBlobField).AsString := 'test-test';
  FPSQLQuery.Post;

  FPSQLQuery.First;
  Check(not FPSQLQuery.FieldByName('byteaf').IsNull, 'byteaf field must be NOT NULL');
  Check(not FPSQLQuery.FieldByName('oidf').IsNull, 'oidf field must be NOT NULL');
  Check(not FPSQLQuery.FieldByName('memof').IsNull, 'memof field must be NOT NULL');

  (FPSQLQuery.FieldByName('byteaf') as TBlobField).SaveToFile('TestOutput\test.bmp');
  (FPSQLQuery.FieldByName('oidf') as TBlobField).SaveToFile('TestOutput\test.bmp');
  Check(FileExists('TestOutput\test.bmp'), 'byteaf cannot save file to disk');
  Check(FileExists('TestOutput\test.bmp'), 'oidf cannot save file to disk');
  Check(FPSQLQuery.FieldByName('memof').AsString = 'test-test', 'Failed to read memof field');
  FPSQLQuery.Close;
end;

procedure TestTPSQLBlobs.TestUpdateObjInsert;
begin
  FPSQLUpdate := TPSQLUpdateSQL.Create(nil);
  try
    FPSQLUpdate.SQL[ukInsert].Text := 'INSERT INTO blobs_test_case_table VALUES (DEFAULT, :byteaf, :oidf, :memof)';
    FPSQLQuery.UpdateObject := FPSQLUpdate;
    FPSQLQuery.SQL.Text := 'SELECT * FROM blobs_test_case_table';
    FPSQLQuery.Open;
    Check(FPSQLQuery.FieldByName('byteaf') is TBlobField, 'Wrong field class for byteaf');
    Check(FPSQLQuery.FieldByName('oidf') is TBlobField, 'Wrong field class for oidf');
    Check(FPSQLQuery.FieldByName('memof') is TBlobField, 'Wrong field class for memof');
    FPSQLQuery.Insert;
    (FPSQLQuery.FieldByName('byteaf') as TBlobField).LoadFromFile('TestData\test.bmp');
    (FPSQLQuery.FieldByName('oidf') as TBlobField).LoadFromFile('TestData\test.bmp');
    (FPSQLQuery.FieldByName('memof') as TBlobField).AsString := 'test-test';
    FPSQLQuery.Post;
    FPSQLQuery.First;
    Check(not FPSQLQuery.FieldByName('byteaf').IsNull, 'byteaf field must be NOT NULL');
    Check(not FPSQLQuery.FieldByName('oidf').IsNull, 'oidf field must be NOT NULL');
    Check(not FPSQLQuery.FieldByName('memof').IsNull, 'memof field must be NOT NULL');
    FPSQLQuery.Close;
  finally
    FreeAndNil(FPSQLUpdate);
  end;
end;

{ TDbSetup }

procedure TDbSetup.SetUp;
begin
  inherited;
  SetUpTestDatabase(QryDB, 'PSQLBlobs.conf');
  QryDB.Execute('CREATE TABLE IF NOT EXISTS blobs_test_case_table(' +
                'id SERIAL NOT NULL PRIMARY KEY,'  +
                'byteaf bytea,' +
                'oidf oid,'  +
                'memof text)');
end;

procedure TDbSetup.TearDown;
begin
  inherited;
  QryDB.Execute('DROP TABLE blobs_test_case_table');
  QryDB.Close;
  ComponentToFile(QryDB, 'PSQLBlobs.conf');
  QryDB.Free;
end;

initialization
  //PaGo: Register any test cases with setup decorator
  RegisterTest(TDbSetup.Create(TestTPSQLBlobs.Suite, 'Database Setup'));

end.

