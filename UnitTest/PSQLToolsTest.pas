unit PSQLToolsTest;
{$I PSQLDAC.inc}
{$IFDEF DUNITX}
  {$M+}
{$ENDIF}
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  PSQLAccess, PSQLDbTables, PSQLTypes, SysUtils, PSQLTools
  {$IFNDEF DUNITX}
  , TestFramework, Db, Windows, ExtCtrls, Controls, Classes,
  DbCommon, Graphics, StdVCL, TestExtensions,
  Forms, PSQLConnFrm
  {$ELSE}
    ,DUnitX.TestFramework
  {$ENDIF};

type

  {$IFNDEF DUNITX}
  //Setup decorator
  TDbSetup = class(TTestSetup)
  protected
    procedure SetUp; override;
    procedure TearDown; override;
  end;
  {$ENDIF}

  // Test methods for class TPSQLGuidField
  {$IFNDEF DUNITX}[TestFixture]{$ENDIF}
  TestTPSQLTools = class({$IFNDEF DUNITX}TTestCase{$ELSE}TObject{$ENDIF})
  private
    procedure InternalSetUp;
    procedure InternalTearDown;
  public
    {$IFNDEF DUNITX}
    procedure SetUp; override;
    {$ELSE}
    [Setup]
    procedure SetUp;
    {$ENDIF}
  published
    procedure TestAnalyze;
    procedure TestVacuum;
    procedure TestReindex;
    procedure TestCluster;
    procedure TestException;
    {$IFDEF DUNITX}
    [SetupFixture]
    procedure SetupFixture;
    [TearDownFixture]
    procedure TearDownFixture;
    {$ENDIF}
  end;

var
  toolsDB: TPSQLDatabase;
  Tools: TPSQLTools;

implementation

uses TestHelper, MainF;

procedure TestTPSQLTools.InternalSetUp;
var
  i: Integer;
begin
  Tools := TPSQLTools.Create(nil);
  Tools.Database := toolsDB;
  Tools.Verbose := True;
  toolsDB.Execute('CREATE TEMP TABLE tools_test_case_table(' +
                'id SERIAL NOT NULL PRIMARY KEY,'  +
                'sfield TEXT DEFAULT now()::text,' +
                'tfield timestamp DEFAULT now(),'  +
                'rfield real DEFAULT random())');
  toolsDB.Execute('CREATE INDEX rfield_idx ON tools_test_case_table (rfield)');
  for i := 0 to 100 do
    toolsDB.Execute('INSERT INTO tools_test_case_table DEFAULT VALUES');
end;

procedure TestTPSQLTools.InternalTearDown;
begin
{$IFNDEF NEXTGEN}
  Tools.Free;
{$ELSE}
  Tools.DisposeOf;
{$ENDIF}
end;

procedure TestTPSQLTools.SetUp;
begin
  Tools.TableName := 'tools_test_case_table';
end;

{$IFDEF DUNITX}
procedure TestTPSQLTools.SetupFixture;
begin
  toolsDB := MainForm.Database;
  InternalSetUp;
end;
procedure TestTPSQLTools.TearDownFixture;
begin
  InternalTearDown;
end;
{$ENDIF}

procedure TestTPSQLTools.TestAnalyze;
begin
  Tools.Operation := poANALYZE;
  DACCheck(Tools.Execute, 'Cannot execute ANALYZE');
end;

procedure TestTPSQLTools.TestCluster;
begin
  Tools.Operation := poCLUSTER;
  Tools.IndexName := 'rfield_idx';
  DACCheck(Tools.Execute, 'Cannot execute CLUSTER INDEX');
  Tools.IndexName := '';
  DACCheck(Tools.Execute, 'Cannot execute CLUSTER TABLE');
  Tools.TableName := '';
  DACCheck(Tools.Execute, 'Cannot execute CLUSTER DATABASE');
end;

procedure TestTPSQLTools.TestException;
begin
  Tools.TableName := 'WRONG_TABLE_NAME';
  try
    Tools.Execute(poANALYZE);
  except
    on E: Exception do
      DACCheck(E is EPSQLDatabaseError, 'Overloaded Execute method failed');
  end;
end;

procedure TestTPSQLTools.TestReindex;
begin
  Tools.Operation := poREINDEX;
  Tools.IndexName := 'rfield_idx';
  DACCheck(Tools.Execute, 'Cannot execute REINDEX INDEX');
  Tools.IndexName := '';
  DACCheck(Tools.Execute, 'Cannot execute REINDEX TABLE');
  Tools.TableName := '';
  DACCheck(Tools.Execute, 'Cannot execute REINDEX DATABASE');
end;

procedure TestTPSQLTools.TestVacuum;
begin
  Tools.Operation := poVACUUM;
  Tools.ColumnList.CommaText := 'id,sfield,tfield';
  Tools.VacuumOptions := [voFULL, voFREEZE, voANALYZE];
  DACCheck(Tools.Execute, 'Cannot execute VACUUM');
end;

{ TDbSetup }

{$IFNDEF DUNITX}
procedure TDbSetup.SetUp;
var i: integer;
begin
  inherited;
  SetUpTestDatabase(toolsDB, 'PSQLToolsTest.conf');
end;

procedure TDbSetup.TearDown;
begin
  inherited;
  toolsDB.Close;
  ComponentToFile(toolsDB, 'PSQLToolsTest.conf');
  toolsDB.Free;
  InternalTearDown;
end;
{$ENDIF}

initialization
 {$IFNDEF DUNITX}
  //PaGo: Register any test cases with setup decorator
  RegisterTest(TDbSetup.Create(TestTPSQLTools.Suite, 'Database Setup'));
{$ELSE}
  TDUnitX.RegisterTestFixture(TestTPSQLTools);
{$ENDIF}

end.

