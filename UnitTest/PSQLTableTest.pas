unit PSQLTableTest;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, Db, PSQLAccess, System.Generics.Collections, System.Types, Classes,
  PSQLDbTables, PSQLTypes, SysUtils, DbCommon, Variants, TestExtensions,
  Forms, PSQLConnFrm;

type
  //Setup decorator
  TDbSetup = class(TTestSetup)
  protected
    procedure SetUp; override;
    procedure TearDown; override;
  end;


  // Test methods for class TPSQLTable

  TestTPSQLTable = class(TTestCase)
  strict private
    FPSQLTable: TPSQLTable;
  public
    procedure SetUp; override;
    procedure TearDown; override;
    procedure TestAddIndex;
    procedure TestApplyRange;
    procedure TestCancelRange;
    procedure TestCreateTable;
    procedure TestDeleteIndex;
    procedure TestEditKey;
    procedure TestEditRangeEnd;
    procedure TestEditRangeStart;
    procedure TestEmptyTable;
    procedure TestFindNearest;
    procedure TestGetIndexNames;
    procedure TestGotoCurrent;
    procedure TestGotoKey;
    procedure TestGotoNearest;
    procedure TestSetKey;
    procedure TestSetRange;
    procedure TestSetRangeEnd;
    procedure TestSetRangeStart;
  published
    procedure TestFindKey;
  end;

var
  QryDB: TPSQLDatabase;

implementation

uses TestHelper;

procedure TestTPSQLTable.SetUp;
begin
  FPSQLTable := TPSQLTable.Create(nil);
  FPSQLTable.Database := QryDB;
end;

procedure TestTPSQLTable.TearDown;
begin
  FPSQLTable.Free;
  FPSQLTable := nil;
end;

procedure TestTPSQLTable.TestAddIndex;
var
  DescFields: string;
  Options: TIndexOptions;
  Fields: string;
  Name: string;
begin
  // TODO: Setup method call parameters
  FPSQLTable.AddIndex(Name, Fields, Options, DescFields);
  // TODO: Validate method results
end;

procedure TestTPSQLTable.TestApplyRange;
begin
  FPSQLTable.ApplyRange;
  // TODO: Validate method results
end;

procedure TestTPSQLTable.TestCancelRange;
begin
  FPSQLTable.CancelRange;
  // TODO: Validate method results
end;

procedure TestTPSQLTable.TestCreateTable;
begin
  FPSQLTable.CreateTable;
  // TODO: Validate method results
end;

procedure TestTPSQLTable.TestDeleteIndex;
var
  Name: string;
begin
  // TODO: Setup method call parameters
  FPSQLTable.DeleteIndex(Name);
  // TODO: Validate method results
end;

procedure TestTPSQLTable.TestEditKey;
begin
  FPSQLTable.EditKey;
  // TODO: Validate method results
end;

procedure TestTPSQLTable.TestEditRangeEnd;
begin
  FPSQLTable.EditRangeEnd;
  // TODO: Validate method results
end;

procedure TestTPSQLTable.TestEditRangeStart;
begin
  FPSQLTable.EditRangeStart;
  // TODO: Validate method results
end;

procedure TestTPSQLTable.TestEmptyTable;
begin
  FPSQLTable.EmptyTable;
  // TODO: Validate method results
end;

procedure TestTPSQLTable.TestFindKey;
var
  ReturnValue: Boolean;
  KeyValues: array of TVarRec;
begin
  FPSQLTable.TableName := 'testtable';
  FPSQLTable.Open;
  FPSQLTable.IndexName := 'pk_testtable';
  Check(FPSQLTable.FindKey(['11', '21']), 'FindKey failed for two-column index');
end;

procedure TestTPSQLTable.TestFindNearest;
var
  KeyValues: array of TVarRec;
begin
  // TODO: Setup method call parameters
  FPSQLTable.FindNearest(KeyValues);
  // TODO: Validate method results
end;

procedure TestTPSQLTable.TestGetIndexNames;
var
  List: TStrings;
begin
  // TODO: Setup method call parameters
  FPSQLTable.GetIndexNames(List);
  // TODO: Validate method results
end;

procedure TestTPSQLTable.TestGotoCurrent;
var
  Table: TPSQLTable;
begin
  // TODO: Setup method call parameters
  FPSQLTable.GotoCurrent(Table);
  // TODO: Validate method results
end;

procedure TestTPSQLTable.TestGotoKey;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FPSQLTable.GotoKey;
  // TODO: Validate method results
end;

procedure TestTPSQLTable.TestGotoNearest;
begin
  FPSQLTable.GotoNearest;
  // TODO: Validate method results
end;

procedure TestTPSQLTable.TestSetKey;
begin
  FPSQLTable.SetKey;
  // TODO: Validate method results
end;

procedure TestTPSQLTable.TestSetRange;
var
  EndValues:  array of TVarRec;
  StartValues:  array of TVarRec;
begin
  // TODO: Setup method call parameters
  FPSQLTable.SetRange(StartValues, EndValues);
  // TODO: Validate method results
end;

procedure TestTPSQLTable.TestSetRangeEnd;
begin
  FPSQLTable.SetRangeEnd;
  // TODO: Validate method results
end;

procedure TestTPSQLTable.TestSetRangeStart;
begin
  FPSQLTable.SetRangeStart;
  // TODO: Validate method results
end;

{ TDbSetup }

procedure TDbSetup.SetUp;
begin
  inherited;
  SetUpTestDatabase(QryDB, 'PSQLTableTest.conf');
  QryDB.Execute('CREATE TEMP TABLE IF NOT EXISTS testtable' +
                '(  col1 character varying(10) NOT NULL,' +
                '  col2 character varying(10) NOT NULL,' +
                '  CONSTRAINT pk_testtable PRIMARY KEY (col1, col2) )');
  QryDB.Execute('INSERT INTO testtable VALUES (''10'', ''20''), (''11'', ''21'')' );
end;

procedure TDbSetup.TearDown;
begin
  inherited;
  QryDB.Close;
  ComponentToFile(QryDB, 'PSQLTableTest.conf');
  QryDB.Free;
end;

initialization
  //PaGo: Register any test cases with setup decorator
  RegisterTest(TDbSetup.Create(TestTPSQLTable.Suite, 'Database Setup'));
end.

