unit PSQLFieldsTest;
{$I PSQLDAC.inc}
{$IFDEF DUNITX}
  {$M+}
{$ENDIF}
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  PSQLFields, PSQLGeomTypes, PSQLAccess, PSQLDbTables, PSQLTypes, Db,
  Classes, SysUtils
  {$IFNDEF DUNITX}
  ,TestFramework, Windows, ExtCtrls, Controls, DbCommon,
  Graphics, StdVCL, TestExtensions, Forms, PSQLConnFrm
  {$ELSE}
    ,DUnitX.TestFramework
  {$ENDIF};

type

  {$IFNDEF DUNITX}
  //Setup decorator
  TDbSetup = class(TTestSetup)
  protected
    procedure SetUp; override;
    procedure TearDown; override;
  end;
  {$ENDIF}

  {$IFNDEF DUNITX}[TestFixture]{$ENDIF}
  // Test methods for class TPSQLGuidField
  TestTPSQLGuidField = class({$IFNDEF DUNITX}TTestCase{$ELSE}TObject{$ENDIF})
  public
    {$IFNDEF DUNITX}
    procedure TearDown; override;
    {$ELSE}
    [TearDown]
    procedure TearDown;
    {$ENDIF}
    procedure TestGUIDField;
    procedure TestGUIDInsert;
    procedure TestGUIDUpdate;
    procedure TestGUIDDelete;
  published
    procedure TestSelectUUID;
    procedure TesTGUIDField_ASCII;
    procedure TestGUIDInsert_ASCII;
    procedure TestGUIDUpdate_ASCII;
    procedure TestGUIDDelete_ASCII;
    procedure TestGUIDField_UTF8;
    procedure TestGUIDInsert_UTF8;
    procedure TestGUIDUpdate_UTF8;
    procedure TestGUIDDelete_UTF8;
    {$IFDEF DUNITX}
    [SetupFixture]
    procedure SetupFixture;
    {$ENDIF}
  end;

  // Test methods for class TPSQLPointField
  {$IFNDEF DUNITX}[TestFixture]{$ENDIF}
  TestGeometricFields = class({$IFNDEF DUNITX}TTestCase{$ELSE}TObject{$ENDIF})
  public
    {$IFNDEF DUNITX}
    procedure TearDown; override;
    {$ELSE}
    [TearDown]
    procedure TearDown;
    {$ENDIF}
  published
    procedure TestSelectGeoms;
    procedure TestInsertGeoms;
    procedure TestUpdateGeoms;
    {$IFDEF DUNITX}
    [SetupFixture]
    procedure SetupFixture;
    {$ENDIF}
  end;

  // Test methods for class TPSQLRangeField
  {$IFNDEF DUNITX}[TestFixture]{$ENDIF}
  TestTPSQLRangeField = class({$IFNDEF DUNITX}TTestCase{$ELSE}TObject{$ENDIF})
  public
    {$IFNDEF DUNITX}
    procedure TearDown; override;
    {$ELSE}
    [TearDown]
    procedure TearDown;
    {$ENDIF}
  published
    procedure TestSelectEmptyRange;
    procedure TestSelectOpenRange;
    procedure TestSelectClosedRange;
    procedure TestSelectUpperInfinityRange;
    procedure TestSelectLowerInfinityRange;
    procedure TestSelectRange;
    procedure TestInsertRange;
    procedure TestUpdateRange;
    {$IFDEF DUNITX}
    [SetupFixture]
    procedure SetupFixture;
    {$ENDIF}
  end;

  {$IFNDEF DUNITX}[TestFixture]{$ENDIF}
  TestNativeNumericField = class({$IFNDEF DUNITX}TTestCase{$ELSE}TObject{$ENDIF})
  public
    {$IFNDEF DUNITX}
    procedure TearDown; override;
    {$ELSE}
    [TearDown]
    procedure TearDown;
    {$ENDIF}
  published
    procedure TestNumericTypeMapping;
    procedure TestNumericSelectInt;
    procedure TestNumericSelectFrac;
    {$IFDEF DUNITX}
    [SetupFixture]
    procedure SetupFixture;
    {$ENDIF}
  end;
  procedure InternalSetUp;

var
  FldDB: TPSQLDatabase;
  FldQry: TPSQLQuery;

implementation

uses TestHelper, Math, MainF;

{$IFDEF DELPHI_5}
function CoCreateGuid(out guid: TGUID): HResult; stdcall; external 'ole32.dll' name 'CoCreateGuid';

function CreateGUID(out Guid: TGUID): HResult;
begin
  Result := CoCreateGuid(Guid);
end;
{$ENDIF}

{$IFDEF DUNITX}
procedure TestTPSQLGuidField.SetupFixture;
begin
  InternalSetUp;
end;
{$ENDIF}

procedure TestTPSQLGuidField.TearDown;
begin
 FldQry.Close;
 FldQry.SQL.Clear;
end;

procedure TestTPSQLGuidField.TestSelectUUID;
begin
  FldQry.SQL.Text := 'SELECT ''35c6c84e-4157-466c-0091-31a4714aca34''::uuid';
  FldQry.Open;
  DACCheck(FldQry.Active, 'Cannot select UUID value');
end;

procedure TestTPSQLGuidField.TestGUIDDelete;
begin
  FldQry.RequestLive := True;
  FldQry.SQL.Text := 'SELECT * FROM uuid_test_case_table';
  FldQry.Open;
  FldQry.Delete;
  DACCheck(FldQry.RowsAffected = 1, 'Cannot delete UUID ' + FldQry.Fields[0].ClassName);
end;

procedure TestTPSQLGuidField.TestGUIDDelete_ASCII;
begin
  fldDB.CharSet := 'SQL_ASCII';
  FldQry.Options := FldQry.Options + [dsoUseGUIDField];
  TestGUIDDelete;
  FldQry.Options := FldQry.Options - [dsoUseGUIDField];
  TestGUIDDelete;
end;

procedure TestTPSQLGuidField.TestGUIDDelete_UTF8;
begin
  fldDB.CharSet := 'UNICODE';
  FldQry.Options := FldQry.Options + [dsoUseGUIDField];
  TestGUIDDelete;
  FldQry.Options := FldQry.Options - [dsoUseGUIDField];
  TestGUIDDelete;
end;

procedure TestTPSQLGuidField.TestGUIDField;
var G1, G2: TGUID;
begin
  G1 := StringToGuid('{35c6c84e-4157-466c-0091-31a4714aca34}');
  FldQry.SQL.Text := 'SELECT ''35c6c84e-4157-466c-0091-31a4714aca34''::uuid';
  FldQry.Open;
  DACCheck(FldQry.Active, 'Cannot select UUID value');
  DACCheck(FldQry.Fields[0].AsString = UpperCase('{35c6c84e-4157-466c-0091-31a4714aca34}'), 'UUID value is corrupted in SQL_ASCII charset using TGUIDField');
  if not (dsoUseGUIDField in FldQry.Options) then
   G2 := TGUIDField(FldQry.Fields[0]).AsGuid
  else
   G2 := TPSQLGUIDField(FldQry.Fields[0]).AsGuid;
  DACCheck(IsEqualGUID(G1, G2), 'GUID comparison failed: ' + FldQry.Fields[0].ClassName);
end;

procedure TestTPSQLGuidField.TestGUIDInsert;
var G: TGUID;
begin
  FldQry.RequestLive := True;
  FldQry.SQL.Text := 'SELECT * FROM uuid_test_case_table';
  FldQry.Open;
  FldQry.Insert;
  DACCheck(CreateGUID(G) = 0, 'GUID generation failed');
  PSQLAccess.LogDebugMessage('GUID generated value:', G.ToString);
  if FldQry.Fields[0] is TGUIDField then

  if not (dsoUseGUIDField in FldQry.Options) then
   TGUIDField(FldQry.Fields[0]).AsGuid := G
  else
   (FldQry.Fields[0] as TPSQLGUIDField).AsGuid := G;
  FldQry.Post;
  DACCheck(FldQry.RowsAffected = 1, 'Cannot insert UUID: ' + FldQry.Fields[0].ClassName);
end;

procedure TestTPSQLGuidField.TestGUIDInsert_ASCII;
begin
  fldDB.CharSet := 'SQL_ASCII';
  FldQry.Options := FldQry.Options + [dsoUseGUIDField];
  TestGUIDInsert;
  FldQry.Options := FldQry.Options - [dsoUseGUIDField];
  TestGUIDInsert;
end;

procedure TestTPSQLGuidField.TestGUIDInsert_UTF8;
begin
  fldDB.CharSet := 'UNICODE';
  FldQry.Options := FldQry.Options + [dsoUseGUIDField];
  TestGUIDInsert;
  FldQry.Options := FldQry.Options - [dsoUseGUIDField];
  TestGUIDInsert;
end;

procedure TestTPSQLGuidField.TestGUIDUpdate;
var G: TGUID;
begin
  FldQry.RequestLive := True;
  FldQry.SQL.Text := 'SELECT * FROM uuid_test_case_table';
  FldQry.Open;
  FldQry.Edit;
  CreateGUID(G);
  if not (dsoUseGUIDField in FldQry.Options) then
    TGUIDField(FldQry.Fields[0]).AsGuid := G
  else
    TPSQLGUIDField(FldQry.Fields[0]).AsGuid := G;
  FldQry.Post;
  DACCheck(FldQry.RowsAffected = 1, 'Cannot update UUID ' + FldQry.Fields[0].ClassName);
end;

procedure TestTPSQLGuidField.TestGUIDUpdate_ASCII;
begin
  fldDB.CharSet := 'SQL_ASCII';
  FldQry.Options := FldQry.Options + [dsoUseGUIDField];
  TestGUIDUpdate;
  FldQry.Options := FldQry.Options - [dsoUseGUIDField];
  TestGUIDUpdate;
end;

procedure TestTPSQLGuidField.TestGUIDUpdate_UTF8;
begin
  fldDB.CharSet := 'UNICODE';
  FldQry.Options := FldQry.Options + [dsoUseGUIDField];
  TestGUIDUpdate;
  FldQry.Options := FldQry.Options - [dsoUseGUIDField];
  TestGUIDUpdate;
end;

procedure TestTPSQLGuidField.TestGUIDField_ASCII;
begin
  fldDB.CharSet := 'SQL_ASCII';
  FldQry.Options := FldQry.Options + [dsoUseGUIDField];
  TestGUIDField;
  FldQry.Options := FldQry.Options - [dsoUseGUIDField];
  TestGUIDField;
end;

procedure TestTPSQLGuidField.TestGUIDField_UTF8;
begin
  fldDB.CharSet := 'UNICODE';
  FldQry.Options := FldQry.Options + [dsoUseGUIDField];
  TestGUIDField;
  FldQry.Options := FldQry.Options - [dsoUseGUIDField];
  TestGUIDField;
end;

{ TDbSetup }
{$IFNDEF DUNITX}
procedure TDbSetup.SetUp;
begin
  inherited;
  SetUpTestDatabase(FldDB, 'PSQLQueryTest.conf');
  InternalSetUp
end;

procedure TDbSetup.TearDown;
begin
  inherited;
  FldDB.Close;
  ComponentToFile(FldDB, 'PSQLQueryTest.conf');
  FldQry.Free;
  FldDB.Free;
end;
{$ENDIF}

{ TestTPSQLPointField }

{$IFDEF DUNITX}
procedure TestGeometricFields.SetupFixture;
begin
  InternalSetUp;
end;
{$ENDIF}

procedure TestGeometricFields.TearDown;
begin
  inherited;
  FldQry.Close;
  FldQry.SQL.Clear;
end;

procedure TestGeometricFields.TestInsertGeoms;
const
  P: TPSQLPoint = (X: 2.5; Y: 3.5);
  C: TPSQLCircle = (R: 1.34; X: 2.5; Y: 3.5);
  B: TPSQLBox = (Right: 2.12; Top: 7.89; Left: -0.14; Bottom: 0.1);
  L: TPSQLLSeg = (X1: 1.2; Y1: 0.4; X2: -5.5; Y2: -0.2);
begin
  FldQry.SQL.Text := 'SELECT * FROM geometry_test_case_table';
  FldQry.RequestLive := True;
  FldQry.Open;
  FldQry.Insert;
  FldQry.FieldByName('id').AsInteger := 1;
  (FldQry.FieldByName('p') as TPSQLPointField).Value := P;
  (FldQry.FieldByName('c') as TPSQLCircleField).Value := C;
  (FldQry.FieldByName('b') as TPSQLBoxField).Value := B;
  (FldQry.FieldByName('l') as TPSQLLSegField).Value := L;
  FldQry.Post;
  DACCheck(TPSQLPointField(FldQry.FieldByName('p')).Value = P, 'Wrong value for "point" field after insert');
  DACCheck(TPSQLCircleField(FldQry.FieldByName('c')).Value = C, 'Wrong value for "circle" field after insert');
  DACCheck(TPSQLBoxField(FldQry.FieldByName('b')).Value = B, 'Wrong value for "box" field after insert');
  DACCheck(TPSQLLSegField(FldQry.FieldByName('l')).Value = L, 'Wrong value for "lseg" field after insert');
end;

procedure TestGeometricFields.TestSelectGeoms;
const
  P: TPSQLPoint = (X: 2.5; Y: 3.5);
  C: TPSQLCircle = (R: 1.34; X: 2.5; Y: 3.5);
  B: TPSQLBox = (Right: 2.12; Top: 7.89; Left: -0.14; Bottom: 0.1);
  L: TPSQLLSeg = (X1: 1.2; Y1: 0.4; X2: -5.5; Y2: -0.2);
begin
  FldQry.SQL.Text := 'SELECT ''( 2.5 , 3.5 )''::point, '+
                     ' ''<( 2.5 , 3.5 ) , 1.34>''::circle, '+
                     ' ''(2.12, 7.89) , (-0.14, 0.1)''::box, '+
                     ' ''[(1.2,0.4),(-5.5,-0.2)]''::lseg ';
  FldQry.Open;
  DACCheck(TPSQLPointField(FldQry.Fields[0]).Value = P, 'Wrong value for "point" field after SELECT');
  DACCheck(TPSQLCircleField(FldQry.Fields[1]).Value = C, 'Wrong value for "circle" field after SELECT');
  DACCheck(TPSQLBoxField(FldQry.Fields[2]).Value = B, 'Wrong value for "box" field after SELECT');
  DACCheck((FldQry.Fields[3] as TPSQLLSegField).Value = L, 'Wrong value for "lseg" field after SELECT');
end;

procedure TestGeometricFields.TestUpdateGeoms;
const
  P: TPSQLPoint = (X: pi; Y: 2.818281828);
  C: TPSQLCircle = (R: 1.34; X: pi; Y: 2.818281828);
  B: TPSQLBox = (Right: 3.12; Top: 9.89; Left: -1.14; Bottom: -10.1);
  L: TPSQLLSeg = (X1: 8.2; Y1: 1.4; X2: -255.5; Y2: -13845.14212);
begin
  FldQry.SQL.Text := 'SELECT * FROM geometry_test_case_table';
  FldQry.RequestLive := True;
  FldQry.Open;
  if FldQry.RecordCount = 0 then TestInsertGeoms;
  FldQry.Edit;
  (FldQry.FieldByName('p') as TPSQLPointField).Value := P;
  (FldQry.FieldByName('c') as TPSQLCircleField).Value := C;
  (FldQry.FieldByName('b') as TPSQLBoxField).Value := B;
  (FldQry.FieldByName('l') as TPSQLLSegField).Value := L;
  FldQry.Post;
  DACCheck(TPSQLPointField(FldQry.FieldByName('p')).Value = P, 'Wrong value for "point" field after update');
  DACCheck(TPSQLCircleField(FldQry.FieldByName('c')).Value = C, 'Wrong value for "circle" field after update');
  DACCheck(TPSQLBoxField(FldQry.FieldByName('b')).Value = B, 'Wrong value for "box" field after update');
  DACCheck(TPSQLLSegField(FldQry.FieldByName('l')).Value = L, 'Wrong value for "lseg" field after update');
end;

{ TestTPSQLRangeField }

{$IFDEF DUNITX}
procedure TestTPSQLRangeField.SetupFixture;
begin
  InternalSetUp;
end;
{$ENDIF}

procedure TestTPSQLRangeField.TearDown;
begin
  inherited;
  FldQry.Close;
  FldQry.SQL.Clear;
end;

procedure TestTPSQLRangeField.TestInsertRange;
var
  R, RF, RD, RTS: TPSQLRange;
begin
  R.Create('[4,6)', FIELD_TYPE_INT4RANGE);
  RF.Create('[3.1,4.6]', FIELD_TYPE_NUMRANGE);
  RD.Create('[2010-01-01,2010-01-11)', FIELD_TYPE_DATERANGE);
  RTS.Create('["2010-01-01 14:45:00","2014-11-20 00:00:00")', FIELD_TYPE_TSRANGE);
  FldQry.SQL.Text := 'SELECT * FROM range_test_case_table';
  FldQry.RequestLive := True;
  FldQry.Open;
  FldQry.Insert;
  FldQry.FieldByName('id').AsInteger := 1;
  (FldQry.FieldByName('intr') as TPSQLRangeField).Value := R;
  (FldQry.FieldByName('numr') as TPSQLRangeField).Value := RF;
  (FldQry.FieldByName('dater') as TPSQLRangeField).Value := RD;
  (FldQry.FieldByName('tsr') as TPSQLRangeField).Value := RTS;
  (FldQry.FieldByName('tstzr') as TPSQLRangeField).Value := RTS;
  FldQry.Post;
  DACCheck((FldQry.FieldByName('intr') as TPSQLRangeField).Value = R, 'Wrong value for "intrange" field after insert');
  DACCheck((FldQry.FieldByName('numr') as TPSQLRangeField).Value = RF, 'Wrong value for "numrange" field after insert');
  DACCheck((FldQry.FieldByName('dater') as TPSQLRangeField).Value = RD, 'Wrong value for "daterange" field after insert');
  DACCheck((FldQry.FieldByName('tsr') as TPSQLRangeField).Value = RTS, 'Wrong value for "timestamprange" field after insert');
  DACCheck((FldQry.FieldByName('tstzr') as TPSQLRangeField).Value = RTS, 'Wrong value for "timestamptzrange" field after insert');
end;

procedure TestTPSQLRangeField.TestSelectClosedRange;
var
  i: Integer;
begin
  FldQry.SQL.Text := 'SELECT ''[3.3, 4.45]''::numrange, '+
                     ' ''[2010-01-01 14:45, 2010-01-01 15:45]''::tsrange,' +
                     ' ''[2010-01-01 14:45 UTC, 2010-01-01 15:45 PST]''::tstzrange';

  //expected output
  //"[3.3,4.45]"; - numrange
  //"["2010-01-01 14:45:00","2010-01-01 15:45:00"]"; - tsrange
  //"["2010-01-01 16:45:00+02","2010-01-02 01:45:00+02"]"; - tstzrange

  FldQry.Open;
  for i := 0 to FldQry.FieldCount - 1 do
   with (FldQry.Fields[i] as TPSQLRangeField).Value do
    DACCheck((UpperBound.State = rbsInclusive) and
          (LowerBound.State = rbsInclusive), 'Range must be closed');
end;

procedure TestTPSQLRangeField.TestSelectEmptyRange;
var
  i: Integer;
begin
  FldQry.SQL.Text := 'SELECT ''empty''::numrange, '+
                     ' ''empty''::int4range,' +
                     ' ''empty''::int8range,' +
                     ' ''empty''::tsrange,' +
                     ' ''empty''::daterange,' +
                     ' ''empty''::tstzrange';
  FldQry.Open;
  for i := 0 to FldQry.FieldCount - 1 do
    DACCheck((FldQry.Fields[i] as TPSQLRangeField).IsEmpty, 'Range field must be empty');
end;

procedure TestTPSQLRangeField.TestSelectLowerInfinityRange;
var
  i: Integer;
begin
  FldQry.SQL.Text := 'SELECT numrange(NULL, 3.3),  '+
                     'tsrange(NULL, ''2010-01-01 14:45''), '+
                     'tstzrange(NULL, ''2010-01-01 14:45 UTC''), '+
                     'int4range(NULL, 1), int8range(NULL, 22), '+
                     'daterange(NULL, ''2010-01-01'')';
  //expected output
  //(,3.3); (,"2010-01-01 14:45:00"); (,"2010-01-01 16:45:00+02"); (,1); (,22); (,2010-01-01)
  FldQry.Open;
  for i := 0 to FldQry.FieldCount - 1 do
   with (FldQry.Fields[i] as TPSQLRangeField).Value do
    DACCheck((LowerBound.State = rbsInfinite), 'Range must gave infinite lower range');
end;

procedure TestTPSQLRangeField.TestSelectOpenRange;
var
  i: Integer;
begin
  FldQry.SQL.Text := 'SELECT ''(3,4)''::numrange, '+
                     ' ''(2010-01-01 14:45, 2010-01-01 15:45)''::tsrange,' +
                     ' ''(2010-01-01 14:45 UTC, 2010-01-01 15:45 PST)''::tstzrange';
  FldQry.Open;
  for i := 0 to FldQry.FieldCount - 1 do
   with (FldQry.Fields[i] as TPSQLRangeField).Value do
    DACCheck((UpperBound.State = rbsExclusive) and
          (LowerBound.State = rbsExclusive), 'Range must be open');
end;

procedure TestTPSQLRangeField.TestSelectRange;
var R: TPSQLRange;
begin
  FldQry.SQL.Text := 'SELECT numrange(3.1, 5.2, ''()''), '+
                     ' int4range(1, 3, ''[)''), ' +
                     ' int4range(1, 1, ''()'') ';
  FldQry.Open;
  DACCheck(FldQry.Active, 'Cannot select "point" value');
  R := (FldQry.Fields[0] as TPSQLRangeField).Value;
  DACCheck(not R.Empty, 'Range is empty');
  DACCheck(R.LowerBound.State = rbsExclusive, 'numrange lower bound must be exclusive');
  DACCheck(R.UpperBound.State = rbsExclusive, 'numrange lower bound must be exclusive');
  DACCheck(SameValue(R.LowerBound.AsFloat, 3.1), 'Wrong numrange lower bound value');
  DACCheck(SameValue(R.UpperBound.AsFloat, 5.2), 'Wrong numrange upper bound value');

  R := TPSQLRangeField(FldQry.Fields[1]).Value;
  DACCheck(not R.Empty, 'Range is empty');
  DACCheck(R.LowerBound.State = rbsInclusive, 'Range lower bound must be inclusive');
  DACCheck(R.UpperBound.State = rbsExclusive, 'Range lower bound must be exclusive');
  DACCheck(R.LowerBound.AsInteger = 1, 'Wrong lower bound value');
  DACCheck(R.UpperBound.AsInteger = 3, 'Wrong upper bound value');

end;

procedure TestTPSQLRangeField.TestSelectUpperInfinityRange;
var
  i: Integer;
begin
  FldQry.SQL.Text := 'SELECT numrange(3.3, NULL), '+
                     'tsrange(''2010-01-01 14:45'', NULL), '+
                     'tstzrange(''2010-01-01 14:45 UTC'', NULL), '+
                     'int4range(1, NULL), int8range(22, NULL), '+
                     'daterange(''2010-01-01'', NULL)';
  //expected output
  //[3.3,); ["2010-01-01 14:45:00",); ["2010-01-01 16:45:00+02",); [1,); [22,); [2010-01-01,)
  FldQry.Open;
  for i := 0 to FldQry.FieldCount - 1 do
   with (FldQry.Fields[i] as TPSQLRangeField).Value do
    DACCheck((UpperBound.State = rbsInfinite), 'Range must gave infinite upper range');
end;

procedure TestTPSQLRangeField.TestUpdateRange;
var
  R, RF, RD, RTS: TPSQLRange;
begin
  R.Create('[7,8)', FIELD_TYPE_INT4RANGE);
  RF.Create('[8.12,124.46]', FIELD_TYPE_NUMRANGE);
  RD.Create('[2012-01-01,2013-01-11)', FIELD_TYPE_DATERANGE);
  RTS.Create('["2011-01-01 14:45:00","2012-11-20 00:00:00")', FIELD_TYPE_TSRANGE);
  FldQry.SQL.Text := 'SELECT * FROM range_test_case_table';
  FldQry.RequestLive := True;
  FldQry.Open;
  if FldQry.RecordCount = 0 then TestInsertRange;
  FldQry.Edit;
  (FldQry.FieldByName('intr') as TPSQLRangeField).Value := R;
  (FldQry.FieldByName('numr') as TPSQLRangeField).Value := RF;
  (FldQry.FieldByName('dater') as TPSQLRangeField).Value := RD;
  (FldQry.FieldByName('tsr') as TPSQLRangeField).Value := RTS;
  (FldQry.FieldByName('tstzr') as TPSQLRangeField).Value := RTS;
  FldQry.Post;
  DACCheck((FldQry.FieldByName('intr') as TPSQLRangeField).Value = R, 'Wrong value for "intrange" field after update');
  DACCheck((FldQry.FieldByName('numr') as TPSQLRangeField).Value = RF, 'Wrong value for "numrange" field after update');
  DACCheck((FldQry.FieldByName('dater') as TPSQLRangeField).Value = RD, 'Wrong value for "daterange" field after update');
  DACCheck((FldQry.FieldByName('tsr') as TPSQLRangeField).Value = RTS, 'Wrong value for "timestamprange" field after update');
  DACCheck((FldQry.FieldByName('tstzr') as TPSQLRangeField).Value = RTS, 'Wrong value for "timestamptzrange" field after update');
end;

{ TestNativeNumericField }
{$IFDEF DUNITX}
procedure TestNativeNumericField.SetupFixture;
begin
  InternalSetUp;
end;
{$ENDIF}

procedure TestNativeNumericField.TearDown;
begin
  inherited;
  //
end;

procedure TestNativeNumericField.TestNumericSelectFrac;
const _Num = '98765432100123456789.98765432100123456789';
var S: string;
begin
  FldQry.ParamCheck := False;
  FldQry.SQL.Text := 'SELECT 98765432100123456789.98765432100123456789 :: numeric';
  FldQry.Open;
  S := FldQry.Fields[0].AsString;
  DACCheck(_Num = S, 'Incorrect value for NUMERIC');
//  CheckEqualsString(_Num, S, 'Incorrect value for NUMERIC');
end;

procedure TestNativeNumericField.TestNumericSelectInt;
const _Num = '98765432100123456789';
var S: string;
begin
  FldQry.ParamCheck := False;
  FldQry.SQL.Text := 'SELECT 98765432100123456789 :: numeric(20, 0)';
  FldQry.Open;
  S := FldQry.Fields[0].AsString;
  DACCheck(_Num = S, 'Incorrect value for NUMERIC');
//  CheckEqualsString(_Num, S, 'Incorrect value for NUMERIC');
end;

procedure TestNativeNumericField.TestNumericTypeMapping;
begin
  FldQry.ParamCheck := False;
  FldQry.SQL.Text := 'SELECT 12.13 :: numeric';
  FldQry.Open;
  {$IFNDEF DUNITX}
  CheckIs(FldQry.Fields[0], TFMTBCDField, 'Incorrect NUMERIC mapping');
  {$ELSE}
  Assert.InheritsFrom(FldQry.Fields[0].ClassType,TFMTBCDField, 'Incorrect NUMERIC mapping');
  {$ENDIF}
end;

procedure InternalSetUp;
begin
  FldDB := MainForm.Database;
  FldQry := TPSQLQuery.Create(nil);
  FldQry.Database := FldDB;
  FldQry.ParamCheck := False;
  FldDB.Execute('SET TimeZone to ''America/Caracas'''); // for the complex timezone -04:30
  FldDB.Execute('CREATE TEMP TABLE IF NOT EXISTS uuid_test_case_table(uuidf uuid NOT NULL PRIMARY KEY)');
  FldDB.Execute('CREATE TEMP TABLE IF NOT EXISTS geometry_test_case_table(id int4 PRIMARY KEY, p point, c circle, b box, l lseg)');
  FldDB.Execute('CREATE TEMP TABLE IF NOT EXISTS range_test_case_table('+
                'id int4 PRIMARY KEY, numr numrange, '+
                'intr int4range, dater daterange, '+
                'tsr tsrange, tstzr tstzrange)');
end;

initialization
{$IFNDEF DUNITX}
  //PaGo: Register any test cases with setup decorator
  RegisterTest(TDbSetup.Create(TestTPSQLGuidField.Suite));
  RegisterTest(TDbSetup.Create(TestGeometricFields.Suite));
  RegisterTest(TDbSetup.Create(TestTPSQLRangeField.Suite));
  RegisterTest(TDbSetup.Create(TestNativeNumericField.Suite));
{$ELSE}
  TDUnitX.RegisterTestFixture(TestTPSQLGuidField);
  TDUnitX.RegisterTestFixture(TestGeometricFields);
  TDUnitX.RegisterTestFixture(TestTPSQLRangeField);
  TDUnitX.RegisterTestFixture(TestNativeNumericField);
{$ENDIF}
end.

