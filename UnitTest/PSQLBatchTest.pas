unit PSQLBatchTest;
{$I PSQLDAC.inc}
{$IFDEF DUNITX}
  {$M+}
{$ENDIF}

{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  PSQLTypes, Classes, PSQLDbTables, SysUtils, PSQLBatch
  {$IFNDEF DUNITX}
    ,TestFramework, Db, Windows, TestExtensions,
    Forms, PSQLConnFrm
  {$ELSE}
    ,DUnitX.TestFramework
  {$ENDIF};

type

  {$IFNDEF DUNITX}
  //Setup decorator
  TDbSetup = class(TTestSetup)
  protected
    procedure SetUp; override;
    procedure TearDown; override;
  end;
  {$ENDIF}

  {$IFNDEF DUNITX}[TestFixture]{$ENDIF}
  TestTPSQLBatchExecute = class({$IFNDEF DUNITX}TTestCase{$ELSE}TObject{$ENDIF})
  strict private
    FPSQLBatchExecute: TPSQLBatchExecute;
    procedure InternalSetUp;
  public
    {$IFNDEF DUNITX}
    procedure SetUp; override;
    procedure TearDown; override;
    {$ELSE}
    [Setup]
    procedure SetUp;
    [TearDown]
    procedure TearDown;
    {$ENDIF}
  published
    procedure TestExecDollarQuoting;
    {$IFDEF DUNITX}
    [SetupFixture]
    procedure SetupFixture;
    {$ENDIF}
  end;

var
  QryDB: TPSQLDatabase;

implementation

uses TestHelper, MainF;

procedure TestTPSQLBatchExecute.InternalSetUp;
begin
  QryDB.Execute('CREATE TEMP TABLE IF NOT EXISTS requestlive_test ' +
                '(' +
                '  id serial NOT NULL PRIMARY KEY,' + //Serial will create Sequence -> not Required
                '  intf integer NOT NULL,' + //NotNull ->Required
                '  string character varying(100) NOT NULL DEFAULT ''abc'',' + //NotNull + Default -> not Required
                '  datum timestamp without time zone,' + //not Required etc.
                '  notes text,' +
                '  graphic oid,' +
                '  b_graphic bytea,' +
                '  b boolean,' +
                '  floatf real,' +
                '  datef date,' +
                '  timef time' +
                ')');
  QryDB.Execute('CREATE TEMP TABLE IF NOT EXISTS required_test ' +
                '(' +
                '  id serial NOT NULL PRIMARY KEY,' + //Serial will create Sequence -> not Required
                '  intf integer NOT NULL,' + //NotNull ->Required
                '  string character varying(100) NOT NULL DEFAULT ''abc'',' + //NotNull + Default -> not Required
                '  datum timestamp without time zone)'); //not Required.
end;

procedure TestTPSQLBatchExecute.SetUp;
begin
  FPSQLBatchExecute := TPSQLBatchExecute.Create(nil);
  FPSQLBatchExecute.Database := QryDB;
end;

{$IFDEF DUNITX}
procedure TestTPSQLBatchExecute.SetupFixture;
begin
  InternalSetUp;
end;
{$ENDIF}

procedure TestTPSQLBatchExecute.TearDown;
begin
  FPSQLBatchExecute.Free;
  FPSQLBatchExecute := nil;
end;

procedure TestTPSQLBatchExecute.TestExecDollarQuoting;
var IsOK: boolean;
begin
  FPSQLBatchExecute.SQL.Text := 'CREATE OR REPLACE FUNCTION bizdays(date,date) '+
                          'RETURNS BIGINT '+
                          'LANGUAGE SQL AS '+
                          '$_$ '+
                          'SELECT count(*) FROM '+
                          '(SELECT extract(''dow'' FROM $1+x) AS dow '+
                          'FROM generate_series(0,$2-$1) x) AS foo '+
                          'WHERE dow BETWEEN 1 AND 5; '+
                          '$_$; ';

  FPSQLBatchExecute.ExecSQL;
  DACCheck(QryDB.SelectString('SELECT bizdays(now, now)', IsOk) > '', 'Creating function as dollar-quoted string failed');
end;

{ TDbSetup }
{$IFNDEF DUNITX}
procedure TDbSetup.SetUp;
begin
  inherited;
  SetUpTestDatabase(QryDB, 'PSQLBatchTest.conf');
  InternalSetUp;
end;

procedure TDbSetup.TearDown;
begin
  inherited;
  QryDB.Close;
  ComponentToFile(QryDB, 'PSQLBatchTest.conf');
  QryDB.Free;
end;
{$ENDIF}

initialization
{$IFNDEF DUNITX}
  // Register any test cases with the test runner
  RegisterTest(TDbSetup.Create(TestTPSQLBatchExecute.Suite, 'TPSQLBatchExecute tests'));
{$ELSE}
  TDUnitX.RegisterTestFixture(TestTPSQLBatchExecute);
{$ENDIF}
end.

