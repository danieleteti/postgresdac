unit PSQLNotifyTest;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, Classes, PSQLNotify, PSQLTypes, PSQLAccess, PSQLDbTables,
  TestExtensions;

type
  //Setup decorator
  TDbSetup = class(TTestSetup)
  protected
    procedure SetUp; override;
    procedure TearDown; override;
  public
    procedure NotifyHandler(Sender: TObject; Event: string; ProcessID : Integer);
    procedure NotifyHandlerEx(Sender: TObject; Channel: string; Payload: string; ProcessID : Integer);
  end;

  // Test methods for class TPSQLNotify
  TestTPSQLNotify = class(TTestCase)
  private
    FPSQLNotify: TPSQLNotify;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestOpenNotify;
    procedure TestCloseNotify;
    procedure TestListenTo;
    procedure TestSendNotify;
    procedure TestSendNotify1;
    procedure TestUnlistenTo;
    procedure TestUnlistenAll;
  end;

var
  NotifyDb: TPSQLDatabase;
  TestNotify: TPSQLNotify;
  MsgReceived, MsgReceivedEx: boolean;

implementation

uses TestHelper, SysUtils;

procedure TestTPSQLNotify.SetUp;
begin
  FPSQLNotify := TPSQLNotify.Create(nil);
  FPSQLNotify.Database := NotifyDb;
  FPSQLNotify.ListenList.CommaText := 'first,second,third';
end;

procedure TestTPSQLNotify.TearDown;
begin
  FPSQLNotify.Free;
  FPSQLNotify := nil;
end;

procedure TestTPSQLNotify.TestOpenNotify;
begin
  FPSQLNotify.OpenNotify;
  Check(FPSQLNotify.Active, 'Notify is not active');
end;

procedure TestTPSQLNotify.TestCloseNotify;
begin
  FPSQLNotify.CloseNotify;
  Check(not FPSQLNotify.Active, 'Notify is active');
end;

procedure TestTPSQLNotify.TestListenTo;
var
  Event: string;
begin
  Event := 'custom';
  FPSQLNotify.OpenNotify();
  FPSQLNotify.ListenTo(Event);
  Check(FPSQLNotify.ListenList.IndexOf(Event) > -1, 'ListenTo failed');
end;

procedure TestTPSQLNotify.TestSendNotify;
var
  Event: string;
begin
  Event := 'first';
  FPSQLNotify.OpenNotify();
  FPSQLNotify.SendNotify(Event);
end;

procedure TestTPSQLNotify.TestSendNotify1;
var
  Payload: string;
  Channel: string;
begin
  Channel := 'second';
  Payload := 'the second channel';
  FPSQLNotify.OpenNotify();
  FPSQLNotify.SendNotify(Channel, Payload);
end;

procedure TestTPSQLNotify.TestUnlistenTo;
var
  Event: string;
begin
  Event := 'third';
  FPSQLNotify.OpenNotify();
  FPSQLNotify.UnlistenTo(Event);
  Check(FPSQLNotify.ListenList.IndexOf(Event) = -1, 'UnlistenTo doesn''t exclude event');
end;

procedure TestTPSQLNotify.TestUnlistenAll;
begin
  FPSQLNotify.OpenNotify();
  FPSQLNotify.UnlistenAll;
  Check(FPSQLNotify.ListenList.Count = 0, 'UnlistenAll doesn''t clear events');
end;

{ TDbSetup }

procedure TDbSetup.SetUp;
begin
  inherited;
  SetUpTestDatabase(NotifyDb, 'PSQLNotify.conf');
  TestNotify := TPSQLNotify.Create(nil);
  TestNotify.Database := NotifyDb;
  TestNotify.ListenList.CommaText := 'first,second,third,custom';
  TestNotify.OnNotify := Self.NotifyHandler;
  TestNotify.OnNotifyEx := Self.NotifyHandlerEx;
  TestNotify.Active := True;
  Check(NotifyDB.ServerVersionAsInt > 090000, 'Server version less then 9.0 to test Payload functionality');
end;

procedure TDbSetup.TearDown;
begin
  inherited;
  TestNotify.Free;
  NotifyDb.Close;
  ComponentToFile(NotifyDb, 'PSQLNotify.conf');
  NotifyDb.Free;

  if not MsgReceived then Status('Simple notify message lost');
  if not MsgReceivedEx then Status('Payload notify message lost');
end;

procedure TDbSetup.NotifyHandler(Sender: TObject; Event: string;
  ProcessID: Integer);
begin
  if NotifyDb.GetBackendPID = ProcessID then //it's ours
    if not MsgReceived then
      MsgReceived := (Event = 'first');
end;

procedure TDbSetup.NotifyHandlerEx(Sender: TObject; Channel,
  Payload: string; ProcessID: Integer);
begin
  if NotifyDb.GetBackendPID = ProcessID then //it's ours
   begin
    if not MsgReceived then
      MsgReceived := (Channel = 'first');
    if not MsgReceivedEx then
      MsgReceivedEx := (Channel = 'second') and (Payload = 'the second channel');
   end;
end;

initialization
  //PaGo: Register any test cases with setup decorator
  RegisterTest(TDbSetup.Create(TestTPSQLNotify.Suite, 'Database Setup'));

end.

