unit PSQLDatabaseTest;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, Db, Windows, PSQLAccess, ExtCtrls, Controls, Classes, PSQLDbTables,
  PSQLTypes, SysUtils, DbCommon, Variants, Graphics, StdVCL, TestExtensions,
  Forms, PSQLConnFrm;

type
  //Setup decorator
  TDbSetup = class(TTestSetup)
  protected
    procedure SetUp; override;
    procedure TearDown; override;
  end;

  // Test methods for class TPSQLDatabase

  TestTPSQLDatabase = class(TTestCase)
  published
    procedure HookUp;
    procedure TestExecute;
    procedure TestGetBackendPID;
    procedure TestSelectString;
    procedure TestSelectString1;
    procedure TestSelectStringDef;
    procedure TestSelectStringDef1;
    procedure TestSelectStrings;
    procedure TestSelectStrings1;
    procedure TestCommit;
    procedure TestGetCharsets;
    procedure TestGetDatabases;
    procedure TestGetSchemaNames;
    procedure TestGetStoredProcNames;
    procedure TestGetTableNames;
    procedure TestGetTablespaces;
    procedure TestGetUserNames;
    procedure TestReset;
    procedure TestRollback;
    procedure TestStartTransaction;
  end;

var
  FPSQLDatabase: TPSQLDatabase;

implementation

procedure ComponentToFile(Component: TComponent; Name: string);

var
  BinStream: TMemoryStream;
  StrStream: TFileStream;
  s: string;
begin
  BinStream := TMemoryStream.Create;
  try
    StrStream := TFileStream.Create(Name, fmCreate);
    try
      BinStream.WriteComponent(Component);
      BinStream.Seek(0, soFromBeginning);
      ObjectBinaryToText(BinStream, StrStream);
    finally
      StrStream.Free;
    end;
  finally
    BinStream.Free
  end;
end;

procedure FileToComponent(Name: string; Component: TComponent);
var
  StrStream:TFileStream;
  BinStream: TMemoryStream;
begin
  StrStream := TFileStream.Create(Name, fmOpenRead);
  try
    BinStream := TMemoryStream.Create;
    try
      ObjectTextToBinary(StrStream, BinStream);
      BinStream.Seek(0, soFromBeginning);
      BinStream.ReadComponent(Component);

    finally
      BinStream.Free;
    end;
  finally
    StrStream.Free;
  end;
end;


procedure TestTPSQLDatabase.HookUp;
begin
 Check(True);
end;

procedure TestTPSQLDatabase.TestExecute;
var
  ReturnValue: Integer;
  Cursor: phDBICur;
  Cache: Boolean;
  Params: TParams;
  SQL: string;
begin
  SQL := 'SELECT version()';
  ReturnValue := FPSQLDatabase.Execute(SQL);
  Check(ReturnValue = 0);
end;

procedure TestTPSQLDatabase.TestGetBackendPID;
var
  ReturnValue: Integer;
begin
  ReturnValue := FPSQLDatabase.GetBackendPID;
  Check(ReturnValue > InvalidOID);
end;

procedure TestTPSQLDatabase.TestSelectString;
var
  ReturnValue: string;
  aFieldName: string;
  IsOk: Boolean;
  aSQL: string;
begin
  Check(False);
  // TODO: Setup method call parameters
  ReturnValue := FPSQLDatabase.SelectString(aSQL, IsOk, aFieldName);
  // TODO: Validate method results
end;

procedure TestTPSQLDatabase.TestSelectString1;
var
  ReturnValue: string;
  aFieldNumber: Integer;
  IsOk: Boolean;
  aSQL: string;
begin
  Check(False);
  // TODO: Setup method call parameters
  ReturnValue := FPSQLDatabase.SelectString(aSQL, IsOk, aFieldNumber);
  // TODO: Validate method results
end;

procedure TestTPSQLDatabase.TestSelectStringDef;
var
  ReturnValue: string;
  aFieldName: string;
  aDefaultValue: string;
  aSQL: string;
begin
  Check(False);
  // TODO: Setup method call parameters
  ReturnValue := FPSQLDatabase.SelectStringDef(aSQL, aDefaultValue, aFieldName);
  // TODO: Validate method results
end;

procedure TestTPSQLDatabase.TestSelectStringDef1;
var
  ReturnValue: string;
  aFieldNumber: Integer;
  aDefaultValue: string;
  aSQL: string;
begin
  Check(False);
  // TODO: Setup method call parameters
  ReturnValue := FPSQLDatabase.SelectStringDef(aSQL, aDefaultValue, aFieldNumber);
  // TODO: Validate method results
end;

procedure TestTPSQLDatabase.TestSelectStrings;
var
  aFieldName: string;
  aList: TStrings;
  aSQL: string;
begin
  Check(False);
  // TODO: Setup method call parameters
  FPSQLDatabase.SelectStrings(aSQL, aList, aFieldName);
  // TODO: Validate method results
end;

procedure TestTPSQLDatabase.TestSelectStrings1;
var
  aFieldNumber: Integer;
  aList: TStrings;
  aSQL: string;
begin
  Check(False);
  // TODO: Setup method call parameters
  FPSQLDatabase.SelectStrings(aSQL, aList, aFieldNumber);
  // TODO: Validate method results
end;

procedure TestTPSQLDatabase.TestCommit;
begin
  FPSQLDatabase.Commit;
  // TODO: Validate method results
end;

procedure TestTPSQLDatabase.TestGetCharsets;
var
  List: TStrings;
begin
  Check(False);
  // TODO: Setup method call parameters
  FPSQLDatabase.GetCharsets(List);
  // TODO: Validate method results
end;

procedure TestTPSQLDatabase.TestGetDatabases;
var
  List: TStrings;
  Pattern: string;
begin
  Check(False);
  // TODO: Setup method call parameters
  FPSQLDatabase.GetDatabases(Pattern, List);
  // TODO: Validate method results
end;

procedure TestTPSQLDatabase.TestGetSchemaNames;
var
  List: TStrings;
  SystemSchemas: Boolean;
  Pattern: string;
begin
  Check(False);
  // TODO: Setup method call parameters
  FPSQLDatabase.GetSchemaNames(Pattern, SystemSchemas, List);
  // TODO: Validate method results
end;

procedure TestTPSQLDatabase.TestGetStoredProcNames;
var
  List: TStrings;
  Pattern: string;
begin
  Check(False);
  // TODO: Setup method call parameters
  FPSQLDatabase.GetStoredProcNames(Pattern, List);
  // TODO: Validate method results
end;

procedure TestTPSQLDatabase.TestGetTableNames;
var
  List: TStrings;
  SystemTables: Boolean;
  Pattern: string;
begin
  Check(False);
  // TODO: Setup method call parameters
  FPSQLDatabase.GetTableNames(Pattern, SystemTables, List);
  // TODO: Validate method results
end;

procedure TestTPSQLDatabase.TestGetTablespaces;
var
  List: TStrings;
  Pattern: string;
begin
  Check(False);
  // TODO: Setup method call parameters
  FPSQLDatabase.GetTablespaces(Pattern, List);
  // TODO: Validate method results
end;

procedure TestTPSQLDatabase.TestGetUserNames;
var
  List: TStrings;
  Pattern: string;
begin
  Check(False);
  // TODO: Setup method call parameters
  FPSQLDatabase.GetUserNames(Pattern, List);
  // TODO: Validate method results
end;

procedure TestTPSQLDatabase.TestReset;
begin
  Check(False);
  FPSQLDatabase.Reset;
  // TODO: Validate method results
end;

procedure TestTPSQLDatabase.TestRollback;
begin
  Check(False);
  FPSQLDatabase.Rollback;
  // TODO: Validate method results
end;

procedure TestTPSQLDatabase.TestStartTransaction;
begin
  Check(False);
  FPSQLDatabase.StartTransaction;
  // TODO: Validate method results
end;

{ MainFormSetup }

procedure TDbSetup.SetUp;
var Frm: TPSQLConnForm;
    F: TextFile;
    S: string;
begin
  inherited;
  FPSQLDatabase := TPSQLDatabase.Create(nil);
  if FileExists('PSQLDatabaseTest.conf') then
    FileToComponent('PSQLDatabaseTest.conf', FPSQLDatabase);
  Application.CreateForm(TPSQLConnForm, Frm);
  try
    with Frm do
     begin
      GetDatabaseProperty(FPSQLDatabase);
      if ShowModal = mrOk then
        SetDatabaseProperty(FPSQLDatabase)
      else
        begin
         FreeAndNil(FPSQLDatabase);
         raise EInvalidOperation.Create('Test cancelled by operator!');
        end;
     end;
  finally
   Frm.Free;
  end;
  FPSQLDatabase.Open;
end;

procedure TDbSetup.TearDown;
begin
  inherited;
  ComponentToFile(FPSQLDatabase, 'PSQLDatabaseTest.conf');
  FPSQLDatabase.Free;
end;

initialization
  //PaGo: Register any test cases with setup decorator
  RegisterTest(TDbSetup.Create(TestTPSQLDatabase.Suite, 'Database Setup'));

  // Register any test cases with the test runner
  //RegisterTest(TestTPSQLDatabase.Suite);
end.

