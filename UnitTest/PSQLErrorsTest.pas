unit PSQLErrorsTest;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, Db, PSQLTypes, Classes, SysUtils, PSQLDbTables,
  Windows, Math, PSQLAboutFrm, TestExtensions;

type
  //Setup decorator
  TDbSetup = class(TTestSetup)
  protected
    procedure SetUp; override;
    procedure TearDown; override;
  end;

  // Test methods for class TPSQLErrors
  TestTPSQLErrors = class(TTestCase)
  published
    procedure TestFailedConnect;
    procedure TestSyntaxError;
    procedure TestConstraintViolation;
  end;


var
  QryDb: TPSQLDatabase;
  ErrorsFileName: string = 'TestOutput\TestErrorsToFile.backup';


implementation

uses TestHelper;

procedure TestTPSQLErrors.TestConstraintViolation;
begin
 if QryDB.ServerVersionAsInt < 090300 then Exit; //feature unsupported
 qryDB.Execute('CREATE TABLE IF NOT EXISTS aa (a int PRIMARY KEY);');
 try
   qryDB.Execute('INSERT INTO aa VALUES (1)');
   try
     qryDB.Execute('INSERT INTO aa VALUES (1)');
   except
     on E: EPSQLDatabaseError do
     begin
      Check(E.ErrorConstraintName > '', 'Error constraint name is empty');
      Check(E.ErrorTableName > '', 'Error table name is empty');
      Status(E.ErrorPrimary);
      Status(E.ErrorConstraintName);
     end;
   end;
 finally
   qryDB.Execute('DROP TABLE aa CASCADE')
 end;
end;

procedure TestTPSQLErrors.TestFailedConnect;
var D: TPSQLDatabase;
begin
  D := TPSQLDatabase.Create(nil);
  try
    D.Host := 'some.unreal.host';
    D.UserName := 'some unreal user';
    D.UserPassword := 'some wrong pwd';
    D.DatabaseName := 'some unexistent db';
    try
     D.Open;
    except
     on E: EPSQLDatabaseError do
     begin
       Check(E.Message > '', 'Error message is empty');
       Status(E.Message);
     end;
    end;
  finally
    D.Free;
  end;
end;

procedure TestTPSQLErrors.TestSyntaxError;
begin
 try
   qryDb.Execute('SOMETHING STUPID');
 except
   on E: EPSQLDatabaseError do
   begin
    Check(E.ErrorSeverity > '', 'Error severity is empty');
    Check(E.ErrorSqlState > '', 'Error SQL state is empty');
    Check(E.ErrorPrimary > '', 'Error primary message is empty');
   end;
 end;
end;

{ TDbSetup }

procedure TDbSetup.SetUp;
begin
  inherited;
  SetUpTestDatabase(QryDB, 'PSQLErrors.conf');
  QryDB.ErrorVerbosity := evVERBOSE;
end;

procedure TDbSetup.TearDown;
begin
  inherited;
  QryDB.Close;
  ComponentToFile(QryDB, 'PSQLErrors.conf');
  QryDB.Free;
end;

initialization
  //PaGo: Register any test cases with setup decorator
  RegisterTest(TDbSetup.Create(TestTPSQLErrors.Suite, 'Database Setup'));

end.

