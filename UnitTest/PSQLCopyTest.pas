unit PSQLCopyTest;
{$IFDEF DUNITX}
  {$M+}
{$ENDIF}
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  PSQLAccess, Classes, PSQLCopy, PSQLDbTables, PSQLTypes, SysUtils
  {$IFNDEF DUNITX}
  ,TestFramework, TestExtensions;
  {$ELSE}
  , DUnitX.TestFramework, Types
  {$ENDIF};

type
  {$IFNDEF DUNITX}
  //Setup decorator
  TDbSetup = class(TTestSetup)
  protected
    procedure SetUp; override;
    procedure TearDown; override;
  end;
  {$ENDIF}

  // Test methods for class TCustomPSQLCopy
  {$IFNDEF DUNITX}[TestFixture]{$ENDIF}
  TestTCustomPSQLCopy = class({$IFNDEF DUNITX}TTestCase{$ELSE}TObject{$ENDIF})
  private
    {$IFDEF DUNITX}
    FRSTestTask : TResourceStream;
    {$ENDIF}
    procedure InternalSetUp;
    procedure InternalTearDown;
  published
    procedure TestLoadFromStream;
    procedure TestSaveToStream;
    procedure TestLoadFromStrings;
    procedure TestSaveToStrings;
    procedure TestLoadFromClientSideFile;
    procedure TestSaveToClientSideFile;
    procedure TestLoadFromServerSideFile;
    procedure TestSaveToServerSideFile;
    procedure TestLoadFromProgram;
    procedure TestSaveToProgram;
    {$IFDEF DUNITX}
    [SetupFixture]
    procedure SetupFixture;
    [TearDownFixture]
    procedure TearDownFixture;
    {$ENDIF}
  end;

implementation

uses TestHelper {$IFDEF DUNITX}, MainF, IOUtils {$ENDIF} ;

var
  FldDB: TPSQLDatabase;
  FPSQLCopy: TPSQLCopy;
  FilePath: string; //= 'TestOut\';

{$IFNDEF DUNITX}
procedure TestTCustomPSQLCopy.TestLoadFromStream;
var
  Stream: TStream;
begin
  Stream := TFileStream.Create(FilePath + 'tasks.csv', fmOpenRead);
  try
    Stream.Position := 0;
    FPSQLCopy.Tablename := 'server_tasks';
    FPSQLCopy.DataFormat := cfCSV;
    FPSQLCopy.LoadFromStream(Stream);
    DACIsTrue(FPSQLCopy.RowsAffected > 0);
  finally
    Stream.Free;
  end;
end;
{$ELSE}
procedure TestTCustomPSQLCopy.TestLoadFromStream;
begin
  FPSQLCopy.Tablename := 'server_tasks';
  FPSQLCopy.DataFormat := cfCSV;
  FPSQLCopy.LoadFromStream(FRSTestTask);
  DACIsTrue(FPSQLCopy.RowsAffected > 0);
end;
{$ENDIF}

procedure TestTCustomPSQLCopy.TestSaveToStream;
var
  Stream: TStream;
begin
  Stream := TMemoryStream.Create;
  try
    FPSQLCopy.SQL.Text := 'SELECT * FROM generate_series(1, 10)';
    FPSQLCopy.SaveToStream(Stream);
    DACIsTrue(Stream.Size > 0);
  finally
    Stream.Free;
  end;
end;

procedure TestTCustomPSQLCopy.TestLoadFromStrings;
var
  Strings: TStrings;
begin
  Strings := TStringList.Create;
  try
    {$IFNDEF DUNITX}
    Strings.LoadFromFile(FilePath + 'tasks.csv');
    {$ELSE}
    Strings.LoadFromStream(FRSTestTask);
    {$ENDIF}
    FPSQLCopy.Tablename := 'server_tasks';
    FPSQLCopy.DataFormat := cfCSV;
    FPSQLCopy.LoadFromStrings(Strings);
    DACIsTrue(FPSQLCopy.RowsAffected = Strings.Count);
  finally
    Strings.Free;
  end;
end;

procedure TestTCustomPSQLCopy.TestSaveToStrings;
var
  Strings: TStrings;
begin
  Strings := TStringList.Create();
  try
    FPSQLCopy.SQL.Text := 'SELECT * FROM generate_series(1, 10)';
    FPSQLCopy.SaveToStrings(Strings);
    DACCheck(Strings.Count = 10, 'SaveToStrings failed');
  finally
    Strings.Free;
  end;
end;

procedure TestTCustomPSQLCopy.InternalSetUp;
begin
  FPSQLCopy := TPSQLCopy.Create(nil);
  FPSQLCopy.Database := FldDB;
  FldDB.Execute('CREATE TEMP TABLE server_tasks(process text, PID int4, session varchar, session_num int4, memory varchar)');
end;

procedure TestTCustomPSQLCopy.InternalTearDown;
begin
  FPSQLCopy.Free;
end;

{$IFDEF DUNITX}
procedure TestTCustomPSQLCopy.SetupFixture;
begin
  FRSTestTask := TResourceStream.Create(HInstance, 'tasks_csv', RT_RCDATA);
  FRSTestTask.Position := 0;

  FldDB := MainForm.Database;
  InternalSetUp;
end;

procedure TestTCustomPSQLCopy.TearDownFixture;
begin
  FRSTestTask.Free;
  InternalTearDown;
end;
{$ENDIF}

procedure TestTCustomPSQLCopy.TestLoadFromClientSideFile;
var
  FileName: string;
begin
{$IFDEF DUNITX}
  FRSTestTask.SaveToFile(FilePath + 'tasks.csv');
{$ENDIF}
  FileName := FilePath + 'tasks.csv';
  FPSQLCopy.Tablename := 'server_tasks';
  FPSQLCopy.DataFormat := cfCSV;
  FPSQLCopy.LoadFromClientSideFile(FileName);
end;

procedure TestTCustomPSQLCopy.TestSaveToClientSideFile;
var
  FileName: string;
begin
  FileName := FilePath + 'TasksCopyOutput.bin';
  DeleteFile(FileName);
  FPSQLCopy.Tablename := 'server_tasks';
  FPSQLCopy.DataFormat := cfBinary;
  FPSQLCopy.SaveToClientSideFile(FileName);
  DACCheck(FileExists(FileName), 'Output file doesn''t exist');
end;

procedure TestTCustomPSQLCopy.TestLoadFromServerSideFile;
var
  FileName: string;
begin
  // TODO: Setup method call parameters
  FPSQLCopy.LoadFromServerSideFile(FileName);
  // TODO: Validate method results
end;

procedure TestTCustomPSQLCopy.TestSaveToServerSideFile;
var
  FileName: string;
  QueryRes: string;
begin
  FPSQlCopy.SQL.Text := 'SELECT * FROM generate_series(1, 11)';
  FileName := FldDB.SelectStringDef('SHOW data_directory', 'C:') + '/loglist.txt';
  FPSQLCopy.SaveToServerSideFile(FileName);
  QueryRes := FldDB.SelectStringDef('SELECT now() - s.modification < ''10 minutes'' FROM pg_stat_file(' + QuotedStr(FileName) + ') s', 'f');
  DACIsTrue(QueryRes = 't');
end;

procedure TestTCustomPSQLCopy.TestLoadFromProgram;
var
  CommandLine: string;
begin
  FPSQLCopy.Tablename := 'server_tasks';
  CommandLine := 'tasklist /fo csv /nh';
  FPSQLCopy.Options := [coHeader];
  FPSQLCopy.DataFormat := cfCSV;
  FPSQLCopy.Encoding := 'WIN866';
  FPSQLCopy.LoadFromProgram(CommandLine);
  DACIsTrue(FPSQLCopy.RowsAffected > 0);
end;

procedure TestTCustomPSQLCopy.TestSaveToProgram;
var
  CommandLine: string;
  QueryRes: string;
begin
  FPSQlCopy.SQL.Text := 'SELECT * FROM generate_series(1, 11)';
  CommandLine := 'find "1" > loglist.txt';
  FPSQLCopy.SaveToProgram(CommandLine);
  QueryRes := FldDB.SelectStringDef('SELECT now()-s.modification<''10 minutes'' FROM pg_stat_file(''loglist.txt'') s', 'f');
  DACIsTrue(QueryRes = 't');
end;

{ TDbSetup }

{$IFNDEF DUNITX}
procedure TDbSetup.SetUp;
begin
  inherited;
  SetUpTestDatabase(FldDB, 'PSQLCopyTest.conf');
  InternalSetUp;
end;

procedure TDbSetup.TearDown;
begin
  inherited;
  FldDB.Close;
  ComponentToFile(FldDB, 'PSQLCopyTest.conf');
  FldDB.Free;
  InternalTearDown;
end;
{$ENDIF}

initialization
 {$IFNDEF DUNITX}
  // Register any test cases with the test runner
  RegisterTest(TDbSetup.Create(TestTCustomPSQLCopy.Suite, 'Database Setup'));
{$ELSE}
  TDUnitX.RegisterTestFixture(TestTCustomPSQLCopy);
{$ENDIF}
  FilePath := {$IFDEF DUNITX}
                      TPath.GetDocumentsPath + PathDelim
                     {$ELSE}
                     'TestOut\'
                     {$ENDIF};
end.

