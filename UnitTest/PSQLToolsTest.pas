unit PSQLToolsTest;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, Db, Windows, PSQLAccess, ExtCtrls, Controls, Classes, PSQLDbTables,
  PSQLTypes, SysUtils, DbCommon, Variants, Graphics, StdVCL, TestExtensions,
  Forms, PSQLConnFrm, PSQLTools;

type

  //Setup decorator
  TDbSetup = class(TTestSetup)
  protected
    procedure SetUp; override;
    procedure TearDown; override;
  end;

  // Test methods for class TPSQLGuidField
  TestTPSQLTools = class(TTestCase)
  public
    procedure SetUp; override;
  published
    procedure TestAnalyze;
    procedure TestVacuum;
    procedure TestReindex;
    procedure TestCluster;
    procedure TestException;
  end;

var
  DB: TPSQLDatabase;
  Tools: TPSQLTools;

implementation

uses TestHelper;

procedure TestTPSQLTools.SetUp;
begin
  Tools.TableName := 'tools_test_case_table';
end;

procedure TestTPSQLTools.TestAnalyze;
begin
  Tools.Operation := poANALYZE;
  Check(Tools.Execute, 'Cannot execute ANALYZE');
end;

procedure TestTPSQLTools.TestCluster;
begin
  Tools.Operation := poCLUSTER;
  Tools.IndexName := 'rfield_idx';
  Check(Tools.Execute, 'Cannot execute CLUSTER INDEX');
  Tools.IndexName := '';
  Check(Tools.Execute, 'Cannot execute CLUSTER TABLE');
  Tools.TableName := '';
  Check(Tools.Execute, 'Cannot execute CLUSTER DATABASE');
end;

procedure TestTPSQLTools.TestException;
begin
  Tools.TableName := 'WRONG_TABLE_NAME';
  try
    Tools.Execute(poANALYZE);
  except
    on E: Exception do
      Check(E is EPSQLDatabaseError, 'Overloaded Execute method failed');
  end;
end;

procedure TestTPSQLTools.TestReindex;
begin
  Tools.Operation := poREINDEX;
  Tools.IndexName := 'rfield_idx';
  Check(Tools.Execute, 'Cannot execute REINDEX INDEX');
  Tools.IndexName := '';
  Check(Tools.Execute, 'Cannot execute REINDEX TABLE');
  Tools.TableName := '';
  Check(Tools.Execute, 'Cannot execute REINDEX DATABASE');
end;

procedure TestTPSQLTools.TestVacuum;
begin
  Tools.Operation := poVACUUM;
  Tools.ColumnList.CommaText := 'id,sfield,tfield';
  Tools.VacuumOptions := [voFULL, voFREEZE, voANALYZE];
  Check(Tools.Execute, 'Cannot execute VACUUM');
end;

{ TDbSetup }

procedure TDbSetup.SetUp;
var i: integer;
begin
  inherited;
  SetUpTestDatabase(DB, 'PSQLToolsTest.conf');
  Tools := TPSQLTools.Create(nil);
  Tools.Database := DB;
  Tools.Verbose := True;
  DB.Execute('CREATE TABLE tools_test_case_table(' +
                'id SERIAL NOT NULL PRIMARY KEY,'  +
                'sfield TEXT DEFAULT now()::text,' +
                'tfield timestamp DEFAULT now(),'  +
                'rfield real DEFAULT random())');
  DB.Execute('CREATE INDEX rfield_idx ON tools_test_case_table (rfield)');
  for i := 0 to 100 do
    DB.Execute('INSERT INTO tools_test_case_table DEFAULT VALUES');
end;

procedure TDbSetup.TearDown;
begin
  inherited;
  ComponentToFile(DB, 'PSQLToolsTest.conf');
  DB.Execute('DROP TABLE tools_test_case_table CASCADE');
  Tools.Free;
  DB.Free;
end;

initialization
  //PaGo: Register any test cases with setup decorator
  RegisterTest(TDbSetup.Create(TestTPSQLTools.Suite, 'Database Setup'));

end.

